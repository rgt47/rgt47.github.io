[
  {
    "path": "posts/dockerizeshinyapp/",
    "title": "Dockerize Shiny Apps",
    "description": "A step-by-step walkthrough of developing a dockerfile for an R shiny app.",
    "author": [
      {
        "name": "Ronald Glenn Thomas",
        "url": "https://focusonR.org"
      }
    ],
    "date": "2022-08-29",
    "categories": [],
    "contents": "\n\n\n\nIntroduction\nThis is the first in a series of posts offering suggested strategies\nfor leveraging open source technologies to provide straight-forward\nsolutions to one of the central challenges in the practice of data\nscience, i.e. how to effectively communicate analysis results to clients\nand collaborators. The group of technologies (or stack) we’ll employ is:\nlinux, R, Shiny, Caddy, git, and Docker. We’ll make use of two cloud\nservices github and AWS.\nThis initial post provides a minimal, proof-of-concept example of\napplying these technologies for the development and hosting of an\ninteractive application for conducting a statistical power analysis.\nWe start with a simple, but hopefully useful, stand-alone shiny app\nand end with a secure (encrypted and authenticated) web site with a\ncustom domain name hosting our app. The approach described here is\nminimalist.\nMethods\nTo begin lets assume we’re just finished developing a ‘shiny’ new\nshiny app, named power0 .\nThe methods described here apply to any shiny app, but to provide a\nconcrete example we’ve created our own app. See the code for our power0\nshiny app here in appendix 1.\nA screenshot of the finished product shows a shiny app with a widget\nto select the sample size and a visualization (2D plot) of the power as\na function of the standardized effect size:\nConsider an app that is a balance of simple and functional – one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. re is our shiny app power0.R:\nThe app is discussed further is appendix\n1\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\nOnce we determine the app is working as designed we are interested in\nhosting the app on a (virtual) server to allow others to share in its\nutility. There are many ways to accomplish this. First off we’ll\ndemonstrate one of the most straightforward and efficient: spinning up a\nserver on AWS and using docker containers for both our app and web\nserver.\n\n\n\nHosting\nOnce we have a production ready shiny app available, we’ll want to\nhost it on the internet. To do that we’ll need the following :\na virtual server (connected via ssh)\na static IP address (to identify the server online)\na domain name (human readable name for IP address)\na web server (software to recognize https protocol requests and\nrespond)\nan SSL certificate (encrypted communication)\nan authentication method (password protection)\na reverse proxy method (translate port 443 requests to port 3838 for\nshiny)\na containerized version of app. (bundled app and requisite\nsoftware)\na method for power0 container to communicate with containerized\nweb-server.\nAt first glance these 9 requirements can appear daunting, but on\ncloser inspection all can be met with minimal expertise and minimal or\nno cost.\nThis can all be done at no cost if you have your own (self-hosted)\nserver with IP address, and domain name, or at minimal cost using a\ncloud-hosting service (e.g. Amazon’s EC2 or Digital Ocean) and a\n“leased” domain name from, e.g. GoDaddy, or Amazon’s Route 53.\nThere are a number of cloud based server options: Microsoft Azure,\nGoogle Cloud, Amazon AWS, Digital Ocean to name a few. Each has their\nown approach to setting up a custom virtual server. Several have free or\nlow-cost service tiers available.\nSpecific instructions for AWS EC2 are here\nin appendix 2.\nOnce the server is available connect via ssh, login, and Install\ndocker, docker-compose and git. with the following command:\nsudo apt install -y git docker docker-compose\nOnce the hosting process is complete items 1, 2, and 3 will be taken\ncare of.\nWeb-site\nTo configure the web server and containerize our app we need to add\nthree files to the server, to go along with our shiny app in the\npower0 directory (in the home directory for default user\nubuntu).\nThe easiest way to do this is to add the three files to the power0\ndirectory on our workstation and then “push” a copy to github.\nThese three configuation files are:\na Caddyfile\na Dockerfile\na docker-compose.yml file\nLets discuss each and initially add them to the power0 directory on\nour workstation. Once the three files are in place in the directory we\ncan push copies to github and from there we can access them from our\nserver.\nWe’ll use Caddy as our web server. Caddy is an open-source tool that\nhas the very useful feature of automating the acquiring and installing\nof an SSL certificate, which is required to use the encrypted\ncommunication protocol https.\nCaddy is configured with a file named Caddyfile. The\ncaddyfile configures three things.\nthe site domain name.\nthe authentication pair login/hash-password, and\nthe ‘reverse proxy’ map that redirects requests to port 443 (ssl\nport) to port 3838 (shiny port).\nThe Caddyfile in our example is:\nauth info bob/utter\nrgtlab.org {\n#auth credentials: bob/utter\nbasicauth * {\n        bob JDJhJDE0JElCQmRGaTA0ajY3bkZTLjRiWUZ4enVoZnVSQzVXVGVUMHlVcXJTaTRGYmpRQVFHLnYzN0tx\n    }\n    handle_path /power0/* {\n        reverse_proxy power0:3838\n    }\n}\nWe can accomplish what we need for items 4, 5 and 6 through the\nCaddyfile.\nFor your project replace:\nrgtlab.org with your domain name\nBob JDJ… with user names and hash-passwords\npower0 with you app’s name\nProviding our servers domain name, rgtlab.org is\nsufficient to initiate an exchange with letsencrypt to\ngenerates an SSL certificate.\nThe second file is the dockerfile. In its simplest form it instructs\nDocker to build a container based on a Rocker/Shiny image then copy in\nthe app.R code and launch shiny on (default) port 3838.\n\n\n\n Photo by\nIan\nTaylor on\nUnsplash\n\nHere is our dockerfile:\n\nFROM rocker/shiny:4.2.0\nCOPY app.R /srv/shiny-server/\nUSER shiny\nCMD [\"/usr/bin/shiny-server\"]\n\nAnd the third file is the docker compose file that containerizes our\nshiny app, and pulls a caddy server image from Docker Hub and create a\nlocal network for the two containers to communicate in.\nThe docker-compose.yml file:\n\nversion: \"3.7\"\n\nservices:\n  power0:\n    build: .\n  caddy:\n    image: caddy:2.3.0-alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\nvolumes:\n    caddy_data:\nTo generate a password for say foobar.\ndocker-compose run caddy caddy hash-password foobar\nOnce in place push power0 to github and then clone repo to\nserver.\nLets clone them into the server from github.\ngit clone https:// ???\ncd to power0 directory and run\ndocker-compose up -d\nand you’re good to go! The app power0 can be accessed by\n‘bob’ at the url\nhttps://rgtlab.org/power0\nwith password ‘utter’\nAppendix1\nConsider the power0.R file:\n\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\nThe app is designed to be maximally minimal. Using only base R\nfunctions, with a minimum of reactive widgets and layout commands to\nkeep it simple while still performing a useful function.\nAppendix2\nAWS is a reasonable choice for setting up a small custom server. AWS\noffers a free set of servers for the first 12 months.\nTo start open the EC2 console.\n   https://aws.amazon.com/console\n\n\n\nCreate an account or sign in. Next set up a working environment.\nSpecifically you’ll want to set up four components of the\nenvironment:\nSsh key pair\nFirewall\nStatic IP\nDomain Name\nThe first time you create an AWS account you need to exchange an SSH\nkey pair with AWS. You can generate the ssh key pair locally on you\nworkstation and upload the public key to EC2.\nCreate a directory to hold the keys. e.g. ~/.ssh. Change\ndirectory into .ssh. Generate the keys with the command\nssh-keygen -m PEM\nname the key prefix something like ssh-rsa.\nOn EC2 select security/keys, browse to the\n.ssh directory and import the public key\nssh-rsa.pub.\nFor convenience, construct a config file in\n~/.ssh as:\nHost ec2\nHostName 13.57.139.31 # static IP\nUser ubuntu # default user on ubuntu server\nPort 22  # the default port ssh uses\nIdentityFile ~/.ssh/ssh-rsa\nthen you can ssh into the new server with\nsh> ssh ec2\nUse “elastic IP” to get a static IP that can be assigned to the\nserver\nclick on elastic IP in left panel\nselect associate Elastic IP 13.57.139.31 choose an instance\n(shiny-july22) to associate with.\nside panel, click “ec2”\nside panel, click “Instances”\nfrom top bar, click “Launch Instances”\nFrom “Quick Start” click Ubuntu button.\nName the server, say shiny-july22\nChoose an AMI (instance template, operating system):\nSuggest choose “Ubuntu Server 22.04 LTS”, but other linux\ndistributions can be utilized, e.g.u Red Hat, or SUSE.)\nNext choose an instance type, e.g. “t2-micro”.\n(different instance types are mixtures of size, processors, memory,\ninstance storage, network performance) click “Next: Configure Instance\nDetails”\nchoose Key pair (use in place aws18.pem) or set up new\npair\nAdd security group, e.g. ‘shiny’ (sg-0f37c94ac1e1b6250) allowing\nports 80 (http), 22 (ssh), 443 (https), and 3838 (shiny). and\n8787\nchoose 30 GB of EBS General Purpose (SSD) or Magnetic\nstorage\nclick Launch Instance\nLog into new instance with ssh from local\nssh -i ~/.ssh/aws18.pem ubuntu@13.57.139.31\nor\nssh ec2 \nif you’ve set up a config file in\n~/.ssh\nTip: Add ubuntu to the docker group to allow docker to run without\nsudo.\nGo to godaddy or Amazon route 53 to associate a domain name with the\nElastic IP in EC2.\n(screenshot)\nTo associate domain name rgtlab.org with elastic IP.\nin Route 53:\nclick on ‘hosted zones’ in side panel\nclick on rgtlab.org in center panel\nclick on checkbox for rgtlab.org type=A line\nthen click on edit record in right panel\nchange ip address to 13.57.139.31\nappendix x (joe data version)\nok! got my shiny app running. Works great! Now how do I get it up on\nthe web and shared with my client Bob?\nStart by creating a repo for the app on github.\nlogin to github (screenshot)\n\n\n\nclick on new in repo name and enter\npower1. (Make the repo private we only want to share with\nBob at this point).\ncreate repo\non workstation: clone the repo\ngit clone https://github.com/rgt47/power1.git\ncopy power1.R in power1 repo\ndirectory.\nupdate remote repo\ngit add .\ngit commit -m ‘add shiny code’\ngit push\n\nNow we need a (virtual) server to host the app. Let use Amazon\nAWS.\n\n\n\n",
    "preview": "posts/dockerizeshinyapp/rshiny.png",
    "last_modified": "2022-08-29T18:09:33-07:00",
    "input_file": {},
    "preview_width": 1200,
    "preview_height": 482
  },
  {
    "path": "posts/simpleshinypower0/",
    "title": "Simple shiny app: power0",
    "description": "A simple but useful shiny app.",
    "author": [
      {
        "name": "Ronald Glenn Thomas",
        "url": "https://focusonR.org"
      }
    ],
    "date": "2022-08-05",
    "categories": [],
    "contents": "\nIntroduction\nConsider an app that is a balance of simple and functional – one that\ncalculates the power for a 2-sample t-test as a function of the\nstandardized effect size. Here is our shiny app\npower0.R:\n\n\nui <- fluidPage(\ntitlePanel(\"Power Calculator for Two Group Parallel Designs\"),\nsliderInput(\"N\", \"Total Sample Size:\", min = 0, max = 300, value = 100),\nplotOutput(\"plot\"),\nverbatimTextOutput(\"eff\"))\n\nserver <- function(input, output, session) {\n  delta = seq(0, 1.5,.05)\n  pow = reactive(sapply(delta, function(x) power.t.test(input$N, d=x)$power ))\n  eff =  renderText(power.t.test(input$N, power=.8)$d)\n  output$plot <- renderPlot({\n  plot(delta, pow(), cex=1.5, ylab=\"power\")\n  abline(h = .8,  col = \"red\", lwd =2.5, lty = 4)\n  abline(v = eff(), col = \"blue\",lwd =2.5, lty = 4)})  \n  output$eff <- renderText(\n    paste0(\"Std. effect detectable with power 80% = \", eff()) )\n}\nshinyApp(ui, server)\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-08-05T09:44:08-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-14-factors-are-confusing/",
    "title": "Factors are confusing.",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Ronald Glenn Thomas",
        "url": "https://focusonR.org"
      }
    ],
    "date": "2021-12-05",
    "categories": [
      "vim",
      "R"
    ],
    "contents": "\nIntroduction\nI’ve been using R for a while now and I have (like many of my colleagues) wrestled with factors frequently. I have on occasion found them useful particulary in defining an order among categorical variables. see example 2 below, but more often they have been a hassle to deal with rather than a help.\nThe typical scenario is when a data set is read from a csv file and the input function (e.g. read.csv() ) decides to declare a numeric variable to be a factor. and categorical variable which should be categorical are defined as factors.\nWhy does this happen? Why is it necessary to use the readAsFactor=False flag in order to get the more sensible behavior.\nLets look back at some of the correspondence between R core members to see what the original thinking was…\nConsider the following data set (borrowed from https://www.tutorialspoint.com/r/r_factors.htm\n\nheight weight gender 1 132 48 male 2 151 49 male 3 162 66 female 4 139 53 female 5 166 67 male 6 147 52 female 7 122 40 male [1] FALSE [1] “male” “male” “female” “female” “male” “female” “male”\n\nRunning the above on the tutorialspoint web site gives a true response for is.factor(gender). But when I run it I get a false. The web site indicates R version 3.4.1 is being run. My version is 4.1.2.\nInteresting. Did the default change somewhere along the line? Let check the release notes. for 4.1\nSample reference section reference. Pocock and Simon (1975)\nMethods\nResults\nPrepare for analyses\n\n\nset.seed(1234)\nlibrary(ggplot2)\nlibrary(lattice)\n\n\n\n\n\nlibrary(PerformanceAnalytics)\nlibrary(quantmod)\nlibrary(dygraphs)\n\n# Function to calculate monthly returns on a stock \nmonthly_stock_returns <- function(ticker, start_year) {\n  \n  # Download the data from Yahoo finance\n  symbol <- getSymbols(ticker, src = 'yahoo', \n                       auto.assign = FALSE, warnings = FALSE)\n  \n  # Tranform it to monthly returns using quantmode::periodReturn\n  data <- periodReturn(symbol, period = 'monthly', \n                       subset=paste(start_year, \"::\", sep = \"\"),\n                       type = 'log')\n\n  # Let's rename the column of returns to something intuitive because\n  # the column name is what will eventually be displayed\n  colnames(data) <- as.character(ticker)\n\n  # We want to be able to work with the xts objects so let's explicitly\n  # assign them into the global environment using ticker name \n  assign(ticker, data, .GlobalEnv)\n}\n\n\n\nLet’s graph the individual performances of each stock over time.\n\n\n# Before we combine these into a portfolio, graph the individual returns\n# and see if anything jumps out as unusual. It looks like something \n# affected Google in March of 2014, but didn't affect JP Morgan or Amazon.\nyear <- 2010\n\n# Use the function the monthly returns on 3 stocks, and pass in the 'year' value\n# Let's choose Google, JP Morgan and Amazon; after you run these functions, have \n# a look at the global environment and make sure your three xts objects are there\nmonthly_stock_returns('GOOG', year)\nmonthly_stock_returns('JPM', year)\nmonthly_stock_returns('AMZN', year)\nmerged_returns <- merge.xts(GOOG, JPM, AMZN)\ndygraph(merged_returns, main = \"Google v JP Morgan v Amazon\") %>%\n  dyAxis(\"y\", label = \"%\") %>%\n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))\n\n\n\n\n\n\n# Before we combine these into a portfolio, graph the individual returns\n# and see if anything jumps out as unusual. It looks like something \n# affected Google in March of 2014, but didn't affect JP Morgan or Amazon.\ndygraph(merged_returns, main = \"Google v JP Morgan v Amazon\") %>%\n  dyAxis(\"y\", label = \"%\") %>%\n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nMazda RX4\n21\n6\n160\n110\n3.9\n2.6\n16\n0\n1\n4\n4\nMazda RX4 Wag\n21\n6\n160\n110\n3.9\n2.9\n17\n0\n1\n4\n4\nDatsun 710\n23\n4\n108\n93\n3.9\n2.3\n19\n1\n1\n4\n1\nHornet 4 Drive\n21\n6\n258\n110\n3.1\n3.2\n19\n1\n0\n3\n1\nHornet Sportabout\n19\n8\n360\n175\n3.1\n3.4\n17\n0\n0\n3\n2\nValiant\n18\n6\n225\n105\n2.8\n3.5\n20\n1\n0\n3\n1\nDuster 360\n14\n8\n360\n245\n3.2\n3.6\n16\n0\n0\n3\n4\nMerc 240D\n24\n4\n147\n62\n3.7\n3.2\n20\n1\n0\n4\n2\nMerc 230\n23\n4\n141\n95\n3.9\n3.1\n23\n1\n0\n4\n2\nMerc 280\n19\n6\n168\n123\n3.9\n3.4\n18\n1\n0\n4\n4\nMerc 280C\n18\n6\n168\n123\n3.9\n3.4\n19\n1\n0\n4\n4\nMerc 450SE\n16\n8\n276\n180\n3.1\n4.1\n17\n0\n0\n3\n3\nMerc 450SL\n17\n8\n276\n180\n3.1\n3.7\n18\n0\n0\n3\n3\nMerc 450SLC\n15\n8\n276\n180\n3.1\n3.8\n18\n0\n0\n3\n3\nCadillac Fleetwood\n10\n8\n472\n205\n2.9\n5.2\n18\n0\n0\n3\n4\nLincoln Continental\n10\n8\n460\n215\n3.0\n5.4\n18\n0\n0\n3\n4\nChrysler Imperial\n15\n8\n440\n230\n3.2\n5.3\n17\n0\n0\n3\n4\nFiat 128\n32\n4\n79\n66\n4.1\n2.2\n19\n1\n1\n4\n1\nHonda Civic\n30\n4\n76\n52\n4.9\n1.6\n19\n1\n1\n4\n2\nToyota Corolla\n34\n4\n71\n65\n4.2\n1.8\n20\n1\n1\n4\n1\nToyota Corona\n22\n4\n120\n97\n3.7\n2.5\n20\n1\n0\n3\n1\nDodge Challenger\n16\n8\n318\n150\n2.8\n3.5\n17\n0\n0\n3\n2\nAMC Javelin\n15\n8\n304\n150\n3.1\n3.4\n17\n0\n0\n3\n2\nCamaro Z28\n13\n8\n350\n245\n3.7\n3.8\n15\n0\n0\n3\n4\nPontiac Firebird\n19\n8\n400\n175\n3.1\n3.9\n17\n0\n0\n3\n2\nFiat X1-9\n27\n4\n79\n66\n4.1\n1.9\n19\n1\n1\n4\n1\nPorsche 914-2\n26\n4\n120\n91\n4.4\n2.1\n17\n0\n1\n5\n2\nLotus Europa\n30\n4\n95\n113\n3.8\n1.5\n17\n1\n1\n5\n2\nFord Pantera L\n16\n8\n351\n264\n4.2\n3.2\n14\n0\n1\n5\n4\nFerrari Dino\n20\n6\n145\n175\n3.6\n2.8\n16\n0\n1\n5\n6\nMaserati Bora\n15\n8\n301\n335\n3.5\n3.6\n15\n0\n1\n5\n8\nVolvo 142E\n21\n4\n121\n109\n4.1\n2.8\n19\n1\n1\n4\n2\n\n\nThis content will appear in the gutter of the article.\n\n\n`\n\ndate\nForecast\nHi_95\nLo_95\n2017-03-01\n54\n64\n44\n2017-04-01\n54\n68\n40\n2017-05-01\n54\n71\n37\n2017-06-01\n54\n74\n34\n2017-07-01\n54\n76\n32\n2017-08-01\n54\n79\n29\n\n\n\n\nPocock, SJ, and R Simon. 1975. “Sequential treatment assignment with balancing for prognostic factors in the controlled clinical trial.” Biometrics. http://www.jstor.org/stable/2529712.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-05T12:08:40-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-19-a-small-but-very-useful-utility/",
    "title": "Cs(), A small but very useful utility.",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Ronald Glenn Thomas",
        "url": "https://focusonR.org"
      }
    ],
    "date": "2021-11-19",
    "categories": [
      "HMISC",
      "R"
    ],
    "contents": "\nIntroduction\n\n\nlibrary(Hmisc)\nfoo = c(\"a\", \"b\", \"c\")\nprint(foo)\n\n[1] “a” “b” “c”\n\nfoo2 = Cs(a,b,c)\nprint(foo2)\n\n[1] “a” “b” “c”\n\nall.equal(foo, foo2)\n\n[1] TRUE\n\n\n\nprint(Cs)\n\nfunction (…) as.character(sys.call())[-1] <bytecode:\n0x7f818c080c70> <environment: namespace:Hmisc>\n\nSample reference section reference. @Pocock1975a\nMethods\nResults\nMy most common usage of the todonotes package, is to insert an\nuncustomized todonotes somewhere in a latex document. An example of this\nusage is the command\nReferences\n\n\n\n",
    "preview": {},
    "last_modified": "2022-07-06T18:32:48-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-07-demo/",
    "title": "demo post",
    "description": "Demo article to get the hang of Distill",
    "author": [
      {
        "name": "Ronald Glenn Thomas",
        "url": "https://focusonR.org"
      }
    ],
    "date": "2021-07-09",
    "categories": [
      "R",
      "AdvR answers"
    ],
    "contents": "\n\nContents\nIntroduction\nMethods\nResults\nReferences\nIntroduction\nMethods\nResults\nAcknowledgments\nAuthor Contributions\n\nCode\nReferences\n\nIntroduction\nSample reference section reference. (Pocock 2005).\nMethods\nA careful reading of the chapter. Reference additional references including:\nResults\nNotes and offered solutions.\n\n\n\n\nkable(head( mtcars ), \"html\")\n\n\n\nmpg\n\n\ncyl\n\n\ndisp\n\n\nhp\n\n\ndrat\n\n\nwt\n\n\nqsec\n\n\nvs\n\n\nam\n\n\ngear\n\n\ncarb\n\n\nMazda RX4\n\n\n21\n\n\n6\n\n\n160\n\n\n110\n\n\n3.9\n\n\n2.6\n\n\n16\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\nMazda RX4 Wag\n\n\n21\n\n\n6\n\n\n160\n\n\n110\n\n\n3.9\n\n\n2.9\n\n\n17\n\n\n0\n\n\n1\n\n\n4\n\n\n4\n\n\nDatsun 710\n\n\n23\n\n\n4\n\n\n108\n\n\n93\n\n\n3.9\n\n\n2.3\n\n\n19\n\n\n1\n\n\n1\n\n\n4\n\n\n1\n\n\nHornet 4 Drive\n\n\n21\n\n\n6\n\n\n258\n\n\n110\n\n\n3.1\n\n\n3.2\n\n\n19\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\n\nHornet Sportabout\n\n\n19\n\n\n8\n\n\n360\n\n\n175\n\n\n3.1\n\n\n3.4\n\n\n17\n\n\n0\n\n\n0\n\n\n3\n\n\n2\n\n\nValiant\n\n\n18\n\n\n6\n\n\n225\n\n\n105\n\n\n2.8\n\n\n3.5\n\n\n20\n\n\n1\n\n\n0\n\n\n3\n\n\n1\n\nlibrary(DT)\ndatatable(iris)\n\n\n\n1 + 1\n\n\\[\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n\\]\nFootnotes use standard Pandoc markdown notation, for example.1 The number of the footnote will be automatically generated.\n\nThis content will appear in the gutter of the article.\n\n\n\nReferences\nIntroduction\nMethods\nResults\n\n\nTable 1: tabled visit and week number\n\n\nlen\n\n\nsetosa\n\n\nversicolor\n\n\nvirginica\n\n\nTotal\n\n\nFALSE\n\n\n11\n\n\n0\n\n\n0\n\n\n11\n\n\nTRUE\n\n\n39\n\n\n50\n\n\n50\n\n\n139\n\n\nTotal\n\n\n50\n\n\n50\n\n\n50\n\n\n150\n\n\nAcknowledgments\nThis is a place to recognize people and institutions. It may also be a good place to acknowledge and cite software that makes your work possible.\nAuthor Contributions\nWe strongly encourage you to include an author contributions statement briefly describing what each author did.\nCode\n\nlibrary(pacman)\np_load(DT, janitor, tibble, broom, snakecase, tidyr, data.table,\n     conflicted, rmarkdown,purrr,ztable, hrbrthemes,readr, dplyr,\n       magrittr, lubridate, zoo, mi, survival, ggplot2, printr,\n       lsmeans, ggthemes,  knitr, xtable, doBy, nlme, reshape2,\n       pander, pwr, tufte)\noptions(scipen = 1, digits = 2)\nknitr::opts_chunk$set(\n  echo = TRUE,\n  warning = TRUE,\n  message = TRUE,\n  comment = \"##\",\n  R.options = list(width = 60))\np = ggplot(diamonds, aes(carat, price)) +geom_smooth()+ \n  facet_grid(~ cut)\nsuppressMessages(print(p))\n\nkable(head( mtcars ), \"html\")\nlibrary(DT)\ndatatable(iris)\n1 + 1\np=ggplot(mtcars, aes(hp, mpg)) + geom_point()  \nsuppressMessages(print(p))\n# clear env: objects and packages\nrm(list = ls())\noptions(knitr.kable.NA = '',dplyr.summarise.inform = FALSE, \n    dplyr.print_max = 1e9,knitr.table.format = \"latex\")\n\nopts_chunk$set(warning = F, message = F, echo = F, fig.width = 3.2,\n       fig.height = 3,  results = \"asis\", dev = \"pdf\",\n       opts_chunk$set(cache.path = \"cache/\"))\nsource(\"~/work/reports/templates/zz.tools.R\")\noptions(scipen = 1, digits = 2)\n# steps to add a simple table \n# 1) inside R block: create the table in tabyl(), call it tab1\n# > dat  %>%  tabyl(var1, var2)\nlibrary(kableExtra)\n# 3. kable(tab1, \"latex\", booktabs = T,escape=FALSE) %>%\n#       kable_styling(latex_options = \"striped\")   \n# 4. zz.figured(tab1)\n# 5. outside R block: \\newpage \\includegraphics[]{./tables/tab1.pdf}\n# 6. choose between the two versions. \n# 7. add a caption.  \\captionof{figure}{tab1 caption}\ntab1 = iris  %>%  \nmutate(len = Petal.Length > 1.3)  %>%  \ntabyl(len,Species) %>%  \nadorn_totals(where = \"row\") %>%  \nadorn_totals(where = \"col\")   \nout = kbl(tab1,format=\"html\",  booktabs = T,escape=FALSE, \n    caption = \"tabled visit and week number\") %>%\n        kable_paper(latex_options = \"striped\")    \nout\n# follow with latex outside R chunk\n# \\includegraphics[]{./tables/tab1.pdf}\n\nReferences\n\n\nPocock, SJ. 2005. “when (not) to stop a clinical trial for Benefit.” JAMA: The Journal of the American Medical Association 294 (17): 2228–30. http://jama.ama-assn.org/content/294/17/2228.short.\n\n\nThis will become a hover-able footnote↩︎\n",
    "preview": "posts/2021-07-07-demo/distill-preview.png",
    "last_modified": "2021-07-09T20:12:19-07:00",
    "input_file": {},
    "preview_width": 1152,
    "preview_height": 288
  }
]
